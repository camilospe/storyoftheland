@model StoriesOfTheLand.Models.Specimen

@{
    ViewData["Title"] = Model.SpecimenID;
}


@* Display the Specimen's Latin Name *@
<div class="text-center">
    @*Display For displays the model's property, in this case, it's a Latin Name*@
    <div>
    <h3>English Name</h3>
    @Html.DisplayFor(model => model.EnglishName)
    </div>
    @if (!string.IsNullOrWhiteSpace(Model.CreeName))
    {
        <div>
            <h3>Cree Name</h3>
        <div>
            @Html.DisplayFor(model => model.CreeName)
        </div>
    </div>
    }
    <div>
        <h3>Latin Name</h3>
        @Html.DisplayFor(model => model.LatinName)
    </div>

    <div>
        <img src="/images/@Model.SpecimenImagePath" alt="@Model.SpecimenImagePath" width="320px" class="img-thumbnail" />
    </div>

    <div class="overflow-auto">
        <h3>Cultural Significance</h3>
        @Html.DisplayFor(model => model.CulturalSignificance)
    </div>

    <div class="overflow-auto">
        <h3>Description</h3>
        @Html.DisplayFor(model => model.SpecimenDescription)
    </div>

    <div class="text-center">
        <button>View the QR code for this specimen</button>
        @{
            // This code block will dynamically generate the QR Code based on the current page's URL
            
            // Because of how Razor Core MVC works, this has to be done in the weirdest way possible
            String stringToEncode = Url.Action("Details", "Specimen", new { id = Model.SpecimenID }, protocol: Context.Request.Scheme);

            // Uses the QrCoder Library to generate a QR Code using the given URL string and display it
            QRCoder.QRCodeGenerator qrGenerator = new QRCoder.QRCodeGenerator();
            QRCoder.QRCodeData qrData = qrGenerator.CreateQrCode(stringToEncode, QRCoder.QRCodeGenerator.ECCLevel.M);
            QRCoder.BitmapByteQRCode qrCode = new QRCoder.BitmapByteQRCode(qrData);

            // Converts it into a Bitmap that can be displayed in the img HTML tag
            byte[] qrCodeBytes = qrCode.GetGraphic(20); // Can add colours here
        }
        <img src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(qrCodeBytes))" alt="@Model.EnglishName" />
    </div>
</div>

        